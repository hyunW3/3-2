//  MPI_Send(void* buf,int count, MPI_Datatype datatype, int dst, int tag, MP
//  MPI_Recv(void* buf,int count, MPI_Datatype datatype, int source, int tag, MPI_comm comm, MPI_Status *status)
//  count : # of items to transfer
//  tags allow programer to deal with the arrivals of messages in an orderly manner

MPI_Cart_create(MPI_COMM_WORLD,ndims,dimsize,periods,reorder, &newcomm);
-> process to 0,1,2,3 -> 0,0 / 0,1 / 1,0 / 1,1

int MPI_Allreduce(void *sendbuf, void *recvbuf, int
count, MPI_Datatype datatype, MPI_Op op, MPI_Comm
comm)


	int a[Y_limit]={0,};
	int b[Y_limit]={0,};
MPI_Allreduce(&a,&b,Y_limit,MPI_INT,MPI_SUM,MPI_COMM_WORLD);


MPI_Barrier(MPI_COMM_WORLD);
